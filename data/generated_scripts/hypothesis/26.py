import pytest
from hypothesis import given, strategies
from networkx import is_isomorphic, ordered
from lark import Lark, Transformer


class DictToLower(Transformer):
    def text(self, items):
        return items[0].lower()

    def dict(self, items):
        return {k: v for k, v in items}

# function to handle translations
def process(data):
    parser = Lark('start: dict', start='start')    
    tree = parser.parse(data)
    return DictToLower().transform(tree)


@given(some_data=strategies.dictionaries(keys=strategies.text(), values=strategies.text()))
def test_process(some_data):
    # Make the dictionary a string
    dict_str = str(some_data)
    result = process(dict_str)
    falsified = not all(k.islower() and v.islower() for k, v in result.items())
    
    assert falsified == False


def test_generate_input():
    for _ in range(20):  # repeat the test 20 times
        # Generate a random dict
        data = strategies.dictionaries(strategies.text(), strategies.text()).example()
        assert isinstance(data, dict)

        keys = [k for k in data.keys()]
        values = [v for v in data.values()]

        # Assert that all keys and values generated by the strategy are strings
        assert all(isinstance(k, str) for k in keys)
        assert all(isinstance(v, str) for v in values)


def test_generate_range():
    for _ in range(20):  # repeat test 20 times
        # Generate a random integer
        range_data = strategies.integers().example()
        assert isinstance(range_data, int)


# Test graph equivalence (using NetworkX)
def test_graph_equivalence():
    for _ in range(20):  # repeat test 20 times
        # Generate two random numbers to be used as nodes
        node_data1 = strategies.integers().example()
        node_data2 = strategies.integers().example()
        assert isinstance(node_data1, int)
        assert isinstance(node_data2, int)

        G1 = ordered.OrderedDiGraph()
        G2 = ordered.OrderedDiGraph()

        # Add the nodes to the graphs
        G1.add_edge(node_data1, node_data2)
        G2.add_edge(node_data1, node_data2)

        # Check that the two graphs are isomorphic
        assert is_isomorphic(G1, G2) == True


if __name__ == "__main__":
   pytest.main()