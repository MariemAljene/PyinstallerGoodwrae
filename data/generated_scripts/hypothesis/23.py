from hypothesis import given, strategies
import pytest


def some_func(some_data):
    # Suppose this function changes text in the dictionary below by making them lower case
    return {k.lower(): v.lower() for k, v in some_data.items()}


@given(some_data=strategies.dictionaries(keys=strategies.text(), values=strategies.text()))
def test_some_func(some_data):
    result = some_func(some_data)

    # Testing for falsification using a simple condition
    falsified = not all(k.islower() and v.islower() for k, v in result.items())
    assert falsified == False


# To include a test case for generating input data
def test_generate_input():
    data = strategies.dictionaries(strategies.text(), strategies.text()).example()
    assert isinstance(data, dict)

    keys = [k for k in data.keys()]
    values = [v for v in data.values()]
    
    # Assert that all keys and values generated by the strategy are strings
    assert all(isinstance(k, str) for k in keys)
    assert all(isinstance(v, str) for v in values)


# To include a test case for generating numeric ranges
def test_generate_range():
    range_data = strategies.integers().example()
    
    # Assert that all data generated by the strategy are integers
    assert isinstance(range_data, int)


# Running the test
if __name__ == "__main__":
   pytest.main()